---
title: "MHC - comparative analysis"
author: "T. Gaczorek (tomasz.gaczorek@uj.edu.pl)"
date: "05.06.2024"
format: html
df-print: kable
editor: visual
theme: darkly
engine: knitr
toc: TRUE
code-fold: true
---

The main script used for the comparative analysis of adaptive MHC introgression in vertebrate hybrid zones (Gaczorek et al., 2024, MBE). The following analyses use data obtained from the analyses of individual hybrid zones and you can find them in seperate directories. If you wish to see how individual hybrid zones were analysed, follow Solea sp. example in the "Solea_example" directory.

**Note that each section is independent and can be run independently.**

# IMPORT PACKAGES

```{r}
#| message: false
library(tidyverse)
library(patchwork)
library(ggplot2)
library(ape)
library(ggtree)
library(nlme)
```

# DESCRIPTIVE STATISCTICS
## Functions

```{r}
#| eval: false
read_and_rbind_gen <- function(taxons){ #combine genotype tables for all taxa
  taxs <- paste0("./genotypes/",taxons,"_genotypes_bothMHC.csv")
  dts <- lapply(taxs,read.csv,fileEncoding = "UTF-8") %>% lapply(.,select,INDIVIDUAL_ID,CLASS,ALLELE,GENOTYPE)
  dts <- lapply(1:length(dts), function(x){mutate(dts[[x]],"TAXON" = taxons[x])})
  as.data.frame(do.call(rbind,dts))
}

read_and_rbind_GI <- function(taxons){ #combine genome-wide admixture tables for all taxa
  taxs <- paste0("./genetic_info/",taxons,"_geneticInfo.csv")
  dts <- lapply(taxs,read.csv,fileEncoding = "UTF-8") %>% lapply(.,select,INDIVIDUAL_ID,SPECIES,CLEAR,MARKER)
  dts <- lapply(1:length(dts), function(x){mutate(dts[[x]],"TAXON" = taxons[x])})
  as.data.frame(do.call(rbind,dts))
}

read_and_rbind_loc <- function(taxons){ #combine locality tables for all taxa
  taxs <- paste0("./localities/",taxons,"_localities.csv")
  dts <- lapply(taxs,read.csv,fileEncoding = "UTF-8") %>% lapply(.,select,INDIVIDUAL_ID,LOCALITY)
  dts <- lapply(1:length(dts), function(x){mutate(dts[[x]],"TAXON" = taxons[x])})
  as.data.frame(do.call(rbind,dts))
}

quantiles_95 <- function(x) {
  r <- quantile(x, probs=c(0, 0.25, 0.5, 0.75, 1))
  names(r) <- c("ymin", "lower", "middle", "upper", "ymax")
  r
}

allelic_richness <- function(x,size_v = 8,cycles = 1000){
  out <- c()
  for(i in 1:cycles){
    inds <- sample(unique(x$INDIVIDUAL_ID),size_v,replace = F)
    out[length(out)+1] <- x %>% filter(INDIVIDUAL_ID %in% inds & GENOTYPE == 1) %>%
      summarise("Allelic_richness" = n_distinct(ALLELE)) %>% .$Allelic_richness
  }
  mean(out)
}
```

## Analyses

```{r}
#| eval: false
#vector of taxa
taxons <- c("Salmo","Solea","Bombina","Lissotriton","Triturus","Anguis","Natrix","Podarcis","Emys","Sphyrapicus","Clethrionomys")

#files import
genotypes <- read_and_rbind_gen(taxons) %>% filter(GENOTYPE == 1 & !grepl("d$",INDIVIDUAL_ID)) #keep only present alleles and remove duplicates
genetic_info <- read_and_rbind_GI(taxons)
localities <- read_and_rbind_loc(taxons)

# number of individuals & localities per species (>50% ancestry)
temp <- left_join(genotypes,localities,by = c("INDIVIDUAL_ID","TAXON")) %>%
  left_join(genetic_info,by = c("INDIVIDUAL_ID","TAXON")) %>%
  select(INDIVIDUAL_ID,LOCALITY,SPECIES,TAXON) %>% distinct() %>%
  na.omit() %>% group_by(TAXON,SPECIES) %>% summarise("N_IND" = n_distinct(INDIVIDUAL_ID),"N_LOC" = n_distinct(LOCALITY))

#number of localities per hybrid zone
hz_names <- c("salar_trutta","aegyptiaca_senegalensis","variegata_bombina","vulgaris_montandoni",
              "anatolicus_ivanbureschi","ivanbureschi_cristatus","ivanbureschi_macedonicus","cristatus_macedonicus",
              "colchica_fragilis","natrix_helvetica","helvetica_astreptophora","bocagei_carbonelli",
              "guadarramae_liolepis","guadarramae_virescens","hispanicus_liolepis","liolepis_virescens",
              "virescens_vaucheri","occidentalis_orbicularis","orbicularis_trinacris",
              "nuchalis_varius","nuchalis_ruber","varius_ruber","rutilus_glareolus")

temp <- left_join(genotypes,localities,by = c("INDIVIDUAL_ID","TAXON")) %>%
  left_join(genetic_info,by = c("INDIVIDUAL_ID","TAXON")) %>%
  select(INDIVIDUAL_ID,LOCALITY,SPECIES,TAXON) %>% distinct() %>% na.omit()

out_list <- list()
for(i in hz_names){
  sps <- strsplit(i,"_")[[1]]
  out_list[[length(out_list)+1]] <- temp %>% filter(SPECIES %in% sps) %>% mutate("N_LOC_TOTAL" = n_distinct(LOCALITY)) %>%
    group_by(TAXON, SPECIES,N_LOC_TOTAL) %>% summarise("N_LOC_SP" = n_distinct(LOCALITY)) %>%
    mutate("HYBRID_ZONE" = i)
}
hz_loc_species <- as.data.frame(do.call(rbind,out_list))
#write.csv(hz_loc_species,"temp_tables/n_localities_per_hz.csv",row.names = F,fileEncoding = "UTF-8")

# number of genotyped individuals for a given genome-wide marker
temp <- genetic_info %>% filter(INDIVIDUAL_ID %in% genotypes$INDIVIDUAL_ID) %>% count(TAXON,MARKER)

# % of admixed individuals
temp <- genetic_info %>% filter(INDIVIDUAL_ID %in% genotypes$INDIVIDUAL_ID) %>% count(TAXON,CLEAR) %>%
  group_by(TAXON) %>% mutate("SUM_N" = sum(n)) %>% filter(CLEAR == F) %>% mutate("%" = n/SUM_N*100)

#number of alleles per species
taxons <- c("Salmo","Solea","Bom.","Lissotriton","Triturus","Anguis","Emys","Natrix", "Podarcis","Sph.","Cle.") #abbreviations for display

temp <- genotypes %>% left_join(genetic_info,by = c("INDIVIDUAL_ID","TAXON")) %>% na.omit() %>%
  filter(SPECIES != "mixed" & SPECIES != "hybrid" & SPECIES != "thyroideus") %>%
  filter(CLEAR == T) %>%
  group_by(TAXON,SPECIES,INDIVIDUAL_ID,CLASS) %>% summarise("N_ALL" = n_distinct(ALLELE)) %>%
  mutate("TAXON" = case_when(TAXON == "Bombina" ~ "Bom.",TAXON == "Sphyrapicus" ~ "Sph.",
                             TAXON == "Clethrionomys" ~"Cle.",T ~ TAXON)) %>%
  mutate("CLASS" = paste("MHC",CLASS),"TAXON" = factor(TAXON,levels = taxons))

#n_alleles species - summary
temp <- genotypes %>% left_join(genetic_info,by = c("INDIVIDUAL_ID","TAXON")) %>% na.omit() %>%
  filter(SPECIES != "mixed" & SPECIES != "hybrid") %>%
  filter(CLEAR == T) %>%
  group_by(TAXON,SPECIES,CLASS) %>% summarise("N_ALL" = n_distinct(ALLELE)) %>%
  arrange(TAXON,SPECIES,CLASS)

#n_alleles taxa - summary
temp <- genotypes %>% left_join(genetic_info,by = c("INDIVIDUAL_ID","TAXON")) %>% na.omit() %>%
  filter(SPECIES != "mixed" & SPECIES != "hybrid" & SPECIES != "thyroideus") %>%
  filter(CLEAR == T) %>%
  group_by(TAXON,CLASS) %>% summarise("N_ALL" = n_distinct(ALLELE)) %>%
  arrange(TAXON,CLASS)

#n_alleles per ind and species - summary
temp <- genotypes %>% left_join(genetic_info,by = c("INDIVIDUAL_ID","TAXON")) %>% na.omit() %>%
  filter(SPECIES != "mixed" & SPECIES != "hybrid" & SPECIES != "thyroideus") %>%
  filter(CLEAR == T) %>%
  group_by(TAXON,CLASS,SPECIES,INDIVIDUAL_ID) %>% mutate("N_ALL" = n_distinct(ALLELE)) %>% ungroup() %>%
  group_by(TAXON,CLASS,SPECIES) %>% summarise("MEAN_ALL" = round(mean(N_ALL),2)) %>% ungroup() %>%
  arrange(TAXON,CLASS)

#n_alleles per ind and taxa - summary
temp <- genotypes %>% left_join(genetic_info,by = c("INDIVIDUAL_ID","TAXON")) %>% na.omit() %>%
  filter(SPECIES != "mixed" & SPECIES != "hybrid" & SPECIES != "thyroideus") %>%
  filter(CLEAR == T) %>%
  group_by(TAXON,CLASS,SPECIES,INDIVIDUAL_ID) %>% mutate("N_ALL" = n_distinct(ALLELE)) %>% ungroup() %>%
  group_by(TAXON,CLASS) %>% summarise("MEAN_ALL" = round(mean(N_ALL),2)) %>% ungroup() %>%
  arrange(TAXON,CLASS)

#allelic richness per species
temp <- genotypes %>% left_join(genetic_info,by = c("INDIVIDUAL_ID","TAXON")) %>% na.omit() %>%
  filter(SPECIES != "mixed" & SPECIES != "hybrid" & SPECIES != "thyroideus") %>%
  filter(CLEAR == T) %>%
  nest_by(TAXON,SPECIES,CLASS) %>% group_by(TAXON,SPECIES,CLASS) %>%
  mutate("ALL_RICHNESS" = unlist(purrr::map(data,allelic_richness))) %>% select(-data)
#write.csv(temp,"temp_tables/AllelicRichness_perSpecies.csv",row.names = F,fileEncoding = "UTF-8")

#allelic richness per taxon
temp <- genotypes %>% left_join(genetic_info,by = c("INDIVIDUAL_ID","TAXON")) %>% na.omit() %>%
  filter(SPECIES != "mixed" & SPECIES != "hybrid" & SPECIES != "thyroideus") %>%
  filter(CLEAR == T) %>%
  nest_by(TAXON,CLASS) %>% group_by(TAXON,CLASS) %>%
  mutate("ALL_RICHNESS" = unlist(purrr::map(data,allelic_richness))) %>% select(-data)
#write.csv(temp,"temp_tables/AllelicRichness_perTaxon.csv",row.names = F,fileEncoding = "UTF-8")
```


# RANDOMIZATION TEST - MODEL

```{r}
#| eval: false
taxons <- c("Solea","Bombina","Lissotriton","Triturus","Anguis","Emys","Natrix", "Podarcis","Sphyrapicus","Clethrionomys")

read_and_rbind_perm <- function(taxons){ #combine permutation results into a single table
  taxs <- paste0("./permutations/",taxons,"_permutation_output_manual.csv")
  taxs[grepl("Lisso",taxs)] <- "./permutations/Lissotriton_permutation_output_manual_all.csv" #lissotriton averaged over transects
  dts <- lapply(taxs,read.csv,fileEncoding = "UTF-8")
  dts <- lapply(1:length(dts), function(x){mutate(dts[[x]],"TAXON" = taxons[x])})
  as.data.frame(do.call(rbind,dts))
}

tree_org <- ape::read.tree("permutations/MHC_introgression_timetree.nwk")

# Time of divergence within species pair
x <- cophenetic.phylo(tree_org) %>% as.data.frame() %>%
  mutate("SP1" = row.names(.)) %>% relocate(SP1,.before = 1) %>%
  pivot_longer(-SP1,names_to = "SP2",values_to = "DISTANCE") %>%
  mutate("SP1" = sapply(sapply(SP1,strsplit,split = "_"),"[",2)) %>%
  mutate("SP2" = sapply(sapply(SP2,strsplit,split = "_"),"[",2),"DISTANCE" = DISTANCE/2)
#write.csv(x,"permutations/DistanceTips_FromTree.csv",row.names = F,fileEncoding = "UTF-8")
dist <- read.csv("permutations/DistanceTips_FromTree.csv",fileEncoding = "UTF-8") #distance between tips

#prepare data
dt <- read_and_rbind_perm(taxons) %>%
  filter(VARIANT == "all") %>%
  mutate("HYBRID_ZONE" = paste(SP1,SP2,sep = "_")) %>%
  select(TAXON,HYBRID_ZONE,CLASS,SES,SP1,SP2) %>%
  mutate("CLASS" = paste("MHC",CLASS)) %>%
  mutate("TAXON" = factor(TAXON,levels = taxons)) %>%
  left_join(dist,c("SP1" = "SP1","SP2" = "SP2")) %>%
  mutate("DISTANCE" = if_else(is.na(DISTANCE) & SP1 == "o. occidentalis",0,DISTANCE)) %>%
  arrange(CLASS,HYBRID_ZONE) %>%
  rename("d" = "SES")

#diagnose node leading to a given species pair
shared_node <- mrca(tree_org) %>% #common node for species pairs
  as.data.frame() %>%
  mutate("SP1" = row.names(.)) %>% relocate(SP1,.before = 1) %>%
  pivot_longer(-SP1,names_to = "SP2",values_to = "NODE") %>%
  mutate("SP1" = sapply(sapply(SP1,strsplit,split = "_"),"[",2)) %>%
  mutate("SP2" = sapply(sapply(SP2,strsplit,split = "_"),"[",2)) %>%
  mutate("HYBRID_ZONE" = paste(SP1,SP2,sep = "_")) %>%
  select(-SP1,-SP2) %>%
  mutate("NODE" = as.character(NODE)) %>%
  add_row("NODE" = "25","HYBRID_ZONE" = "o. occidentalis_orbicularis") #adding Emys

#calculate distance between nodes
dist_nodes <- dist.nodes(tree_org) %>% as.data.frame() %>%
  mutate("NODE1" = row.names(.)) %>% relocate(NODE1,.before = 1) %>%
  pivot_longer(-NODE1,names_to = "NODE2",values_to = "DISTANCE") %>%
  left_join(shared_node,by = c("NODE1" = "NODE"),multiple = "all") %>%
  rename("HYBRID_ZONE1" = "HYBRID_ZONE") %>%
  left_join(shared_node,by = c("NODE2" = "NODE"),multiple = "all") %>%
  rename("HYBRID_ZONE2" = "HYBRID_ZONE")

# Correlation matrix
cor_mat <- data.frame("HYBRID_ZONE1" = sort(rep(unique(dt$HYBRID_ZONE),times = length(unique(dt$HYBRID_ZONE)))),
                      "HYBRID_ZONE2" = rep(unique(dt$HYBRID_ZONE),times = length(unique(dt$HYBRID_ZONE)))) %>%
  left_join(dist_nodes,by = c("HYBRID_ZONE1","HYBRID_ZONE2"),multiple = "all") %>%
  select(-NODE1,-NODE2) %>% 
  pivot_wider(names_from = "HYBRID_ZONE2",values_from = "DISTANCE",names_sort = F) %>%
  select(-HYBRID_ZONE1)

rownames(cor_mat) <- colnames(cor_mat)
cor_mat <- as.matrix(cor_mat)

max_value <- max(cor_mat) #changing matrix of distances into correlation matrix
cor_mat <- (max_value-cor_mat)/max_value

#keep the same correlation matrix within each MHC class but assume no correlation between MHC classes
null_mat <- cor_mat
null_mat[,] <- 0
cor_mat <- cbind(rbind(cor_mat,null_mat),rbind(null_mat,cor_mat))

#run models
formulas <- c("d~0+CLASS","d~CLASS","d~CLASS*DISTANCE","d~CLASS+DISTANCE")

out_list <- list()
out_models <- list()
for(j in formulas){
  formula_v <- as.formula(j)
  
  #test different lambda values
  lambda_range <- seq(0,1,0.0001)
  ll <- c()
  for(lambda in lambda_range){
    if(lambda == 0){
      model_temp <- gls(formula_v,dt,method ="ML")
    } else {
      C_new <-  Matrix::nearPD(cor_mat*lambda)$mat
      C_new <- corSymm(C_new[lower.tri(C_new)], fixed = T)
      model_temp <- gls(formula_v,dt,correlation = C_new,method = "ML")
    }
    ll[length(ll)+1] <- model_temp$logLik
  }
  chosen_lambda <- lambda_range[which.max(ll)]
  
  #model with correlation
  if(chosen_lambda != 0){
    C_new <-  Matrix::nearPD(cor_mat*chosen_lambda)$mat # modify matrix and make it positive-definite
    C_new <- corSymm(C_new[lower.tri(C_new)], fixed = T)
    model1 <- gls(formula_v,dt,correlation = C_new,method = "ML")
    summary(model1)
  } else {
    model1 <- gls(formula_v,dt,method = "ML")
    summary(model1)
  }
  description <- j
  model1$description <- description
  model1$lambda <- chosen_lambda
  out_models[[j]] <- model1
  
  if(j == "d~0+CLASS"){
    conf <-  as.data.frame(nlme::intervals(model1)$coef)
    out_list[[length(out_list)+1]] <- data.frame("CLASS" = c("MHC I","MHC II"),"MEAN" = model1$coefficients) %>%
      left_join(data.frame("CLASS" = c("MHC I","MHC II"),"YMIN" = conf$lower,"YMAX" = conf$upper),by = "CLASS")
  }
}
dt_means <- as.data.frame(do.call(rbind,out_list))

#statistical models - exclusion
t_tables <- as.data.frame(do.call(rbind,lapply(lapply(out_models, summary),function(x){as.data.frame(x$tTable) %>% 
    mutate("CLASS" = stringr::str_remove_all(rownames(.),"CLASSMHC ")) %>%
    mutate("FORMULA" = x$description)})))
rownames(t_tables) <- NULL

#plot only for the CLASS
p <- ggplot()+
  geom_point(aes(x = CLASS,y = d),data = dt,position = position_jitter(width = 0.15),size = 3)+
  geom_point(aes(x = CLASS,y = MEAN),data = dt_means,col = "red",size = 3)+
  theme_bw()+
  geom_errorbar(aes(x = CLASS,ymin = YMIN,ymax = YMAX),data = dt_means,color = "red",width = 0.2,lwd = 2)+
  theme(axis.text = element_text(size = 20),panel.grid.major.x = element_blank(),axis.title.x = element_blank(),
        axis.title.y = element_text(size = 20),strip.text = element_text(size = 20))+
  labs(y = "SES")
p
```

# GEOGRAPHIC CLINES

Prior to this step, I fitted geographic clines for each system independently. In folder "./geographic_clines/independent_code/" you will find R script, exemplary input file and output.

## Gather parameters

```{r}
#| eval: false
taxons <- c("Bombina","Lissotriton","Triturus","Anguis","Emys","Sphyrapicus","Natrix","Solea")

read_and_rbind_perm <- function(taxons){ #combine the parameters of fitted geographical clines
  taxs <- paste0("./geographic_clines/",taxons,"_LL_parameters.csv")
  dts <- lapply(taxs,read.csv,fileEncoding = "UTF-8")
  dts <- lapply(1:length(dts), function(x){mutate(dts[[x]],"TAXON" = taxons[x])})
  as.data.frame(do.call(rbind,dts))
}

read_and_rbind_perm_n <- function(taxons){ #combine input tables used to fit geographical clines
  taxs <- paste0("./geographic_clines/",taxons,"_hzar_input.csv")
  dts <- lapply(taxs,read.csv,fileEncoding = "UTF-8")
  dts <- lapply(1:length(dts), function(x){mutate(dts[[x]],"TAXON" = taxons[x])})
  as.data.frame(do.call(rbind,dts))
}

#get the number of localities
n_tab <- read_and_rbind_perm_n(taxons) %>%
  select(HYBRID_ZONE,"HI"=nSamples_H_I,"HII"=nSamples_H_II,"QI"=nSamples_Q_I,"Q2"=nSamples_Q_II,"genomic"=nSamples_genomic,TAXON) %>%
  pivot_longer(cols = 2:6,names_to = "MARKER",values_to = "OBSERVATIONS") %>% na.omit() %>%
  group_by(HYBRID_ZONE,TAXON,MARKER) %>% summarise("N" = n())

marker <- "H" #select marker (H - hybrid index, Q - structure)

dt <- read_and_rbind_perm(taxons) %>%
  left_join(n_tab,by = c("HYBRID_ZONE","TAXON","MARKER")) %>%
  filter(PARAMETERS %in% c("center","width")) %>% 
  filter(grepl(marker,MARKER) | MARKER == "genomic") %>%
  mutate("LEVEL" = case_when(LEVEL == "high" ~ "high2",T ~ LEVEL)) %>%
  mutate("LEVEL" = case_when(LEVEL == "low" ~ "high",LEVEL == "high2" ~ "low",T ~ LEVEL)) %>%
  mutate("MARKER" = case_when(grepl("II",MARKER) ~ "MHC II",grepl("I$",MARKER)  ~ "MHC I",T ~ MARKER)) %>%
  filter(!HYBRID_ZONE %in% c("astreptophora_helveticaAH","helvetica_natrixHN3"))

#write.csv(dt,"temp_tables/Geographic_clines_original.csv",row.names = F,fileEncoding = "UTF-8")
#
```

## Calculate Hedges G

```{r}
#| eval: false
dt <- read.csv("temp_tables/Geographic_clines_original.csv",fileEncoding = "UTF-8") %>% #cline parameters
  pivot_wider(names_from = LEVEL,values_from = VALUES) %>%
  mutate("SE" = (high-low)/3.92) %>%
  mutate("SD" = SE*sqrt(N)) %>%
  mutate("SP1" = sapply(strsplit(HYBRID_ZONE,"_"),"[",1),"SP2" = sapply(strsplit(HYBRID_ZONE,"_"),"[",2)) %>%
  mutate(across(c(SP1,SP2),.fns = function(x){stringr::str_replace_all(x,pattern = "[:upper:].*$",replacement = "")}))

#correct signs of cline centre according to the allelic richness
allelic_richness <- read.csv("temp_tables/AllelicRichness_perSpecies.csv") %>%
  mutate("CLASS" = case_when(grepl("II",CLASS) ~ "MHC II",grepl("I$",CLASS)  ~ "MHC I",T ~ CLASS)) %>%
  select(-TAXON)

dt <- left_join(dt,allelic_richness,by = c("MARKER" = "CLASS","SP1" = "SPECIES")) %>%
  rename("AR1" = "ALL_RICHNESS") %>%
  left_join(allelic_richness,by = c("MARKER" = "CLASS","SP2" = "SPECIES")) %>% 
  rename("AR2" = "ALL_RICHNESS") 

#Hedges G
out_list <- list()
for(i in unique(dt$HYBRID_ZONE)){
  temp1 <- filter(dt,HYBRID_ZONE == i)
  for(k in c("width","center")){
    temp <- filter(temp1,PARAMETERS == k)
    gen_value <- temp$main[temp$MARKER == "genomic"]
    gen_var <- temp$SD[temp$MARKER == "genomic"]^2
    gen_n <- temp$N[temp$MARKER == "genomic"]
    
    for(j in unique(temp$MARKER)){
      if(j != "genomic"){
        MHC_value <- temp$main[temp$MARKER == j]
        MHC_var <- temp$SD[temp$MARKER == j]^2
        MHC_n <- temp$N[temp$MARKER == j]
        
        J_estimate <- 1-(3/((4*(MHC_n+gen_n-2))-1))
        
        
        if(k == "width"){
          d <- ((MHC_value-gen_value)/sqrt((((MHC_n-1)*MHC_var)+((gen_n-1)*gen_var))/(MHC_n+gen_n-2)))*J_estimate
        } else if(k == "center"){
          diff_v <- MHC_value-gen_value
          if(temp$AR1[temp$MARKER == j] < temp$AR2[temp$MARKER == j]){
            diff_v <- -diff_v
          }
          d <- (diff_v/sqrt((((MHC_n-1)*MHC_var)+((gen_n-1)*gen_var))/(MHC_n+gen_n-2)))*J_estimate
        }
        v <- ((MHC_n+gen_n)/(MHC_n*gen_n))+((d^2)/(2*(MHC_n+gen_n)))
        out <- c(unique(temp$TAXON),i,j,J_estimate,d,v,k)
        out_list[[length(out_list)+1]] <- out
      }
    }
  }
}
out_table <- as.data.frame(do.call(rbind,out_list))
colnames(out_table) <- c("TAXON","HYBRID_ZONE","MARKER","J","d","v","PARAMETERS")
out_table <- mutate(out_table,across(.cols = c("J","d","v"),.fns = as.numeric))
#write.csv(out_table,"temp_tables/Geographic_clines_Hedges_g.csv",fileEncoding = "UTF-8",row.names = F)

#plot
dt <- read.csv("temp_tables/Geographic_clines_Hedges_g.csv") %>%
  mutate("PARAMETERS" = if_else(PARAMETERS == "center","centre",PARAMETERS)) %>%
  mutate("HYBRID_ZONE" = case_when(HYBRID_ZONE == "bombina_variegataK" ~ "Bombina bombina - B. variegata (K)",
                                   HYBRID_ZONE == "bombina_variegataJ" ~ "Bombina bombina - B. variegata (J)",
                                   HYBRID_ZONE == "montandoni_vulgarisS" ~ "Lissotriton montandoni - L. vulgaris (S)",
                                   HYBRID_ZONE == "montandoni_vulgarisT" ~ "Lissotriton montandoni - L. vulgaris (T)",
                                   HYBRID_ZONE == "montandoni_vulgarisR2" ~ "Lissotriton montandoni - L. vulgaris (R2)",
                                   HYBRID_ZONE == "montandoni_vulgarisR" ~ "Lissotriton montandoni - L. vulgaris (R)",
                                   HYBRID_ZONE == "montandoni_vulgarisL" ~ "Lissotriton montandoni - L. vulgaris (L)",
                                   HYBRID_ZONE == "ivanbureschi_macedonicus" ~ "Triturus ivanbureschi - T. macedonicus",
                                   HYBRID_ZONE == "cristatus_macedonicus" ~ "Triturus cristatus - T. macedonicus",
                                   HYBRID_ZONE == "cristatus_ivanbureschi" ~ "Triturus cristatus - T. ivanbureschi",
                                   HYBRID_ZONE == "anatolicus_ivanbureschi" ~ "Triturus anatolicus - T. ivanbureschi",
                                   HYBRID_ZONE == "colchica_fragilisA" ~ "Anguis colchica - A. fragilis",
                                   HYBRID_ZONE == "occidentalis_orbicularisA" ~ "Emys o. occidentalis - E. orbicularis",
                                   HYBRID_ZONE == "nuchalis_ruberNR" ~ "Sphyrapicus nuchalis - S. ruber",
                                   #HYBRID_ZONE == "helvetica_natrixHN3" ~ "Natrix helvetica - N. natrix (HN3)",
                                   HYBRID_ZONE == "helvetica_natrixHN2" ~ "Natrix helvetica - N. natrix (HN2)",
                                   HYBRID_ZONE == "helvetica_natrixHN4" ~ "Natrix helvetica - N. natrix (HN1)",
                                   #HYBRID_ZONE == "astreptophora_helveticaAH" ~ "Natrix astreptophora - N. helvetica",
                                   HYBRID_ZONE == "aegyptiaca_senegalensisA" ~ "Solea aegyptiaca - S. senegalensis"))

dt$HYBRID_ZONE <- factor(dt$HYBRID_ZONE,levels = rev(c("Solea aegyptiaca - S. senegalensis",
                                                   "Bombina bombina - B. variegata (J)","Bombina bombina - B. variegata (K)",
                                                   "Lissotriton montandoni - L. vulgaris (L)","Lissotriton montandoni - L. vulgaris (R)",
                                                   "Lissotriton montandoni - L. vulgaris (R2)",
                                                   "Lissotriton montandoni - L. vulgaris (S)","Lissotriton montandoni - L. vulgaris (T)",
                                                   "Triturus anatolicus - T. ivanbureschi","Triturus cristatus - T. ivanbureschi",
                                                   "Triturus cristatus - T. macedonicus","Triturus ivanbureschi - T. macedonicus",
                                                   "Anguis colchica - A. fragilis","Emys o. occidentalis - E. orbicularis",
                                                   #"Natrix astreptophora - N. helvetica",
                                                   "Natrix helvetica - N. natrix (HN1)",
                                                   "Natrix helvetica - N. natrix (HN2)",
                                                   #"Natrix helvetica - N. natrix (HN3)",
                                                   "Sphyrapicus nuchalis - S. ruber")))

dt$PARAMETERS <- factor(dt$PARAMETERS,levels = c("width","centre"))

p <- ggplot(dt) + 
  geom_errorbarh(aes(xmin = d-(1.96*sqrt(v)),xmax = d+(1.96*sqrt(v)),y = HYBRID_ZONE,color = MARKER),
                 position = position_dodge(width = 0.4),height = 0.5) +
  geom_point(aes(x = d,y = HYBRID_ZONE,color = MARKER),position = position_dodge(width = 0.4))+
  facet_grid(cols =  vars(PARAMETERS))+
  theme_bw()+labs(x = "Effect size (Hedges g)")+
  theme(axis.title.y = element_blank(),axis.title.x = element_text(size = 20),panel.grid.major.y = element_blank(),
        axis.text = element_text(size = 15),panel.grid.minor = element_blank(),legend.title = element_blank(),
        legend.text = element_text(size = 15),strip.background = element_rect(fill = "white"),strip.text = element_text(size = 15))+
  scale_color_manual(values = c("MHC I" = "black","MHC II" = "green3"))+
  scale_y_discrete(expand = expansion(mult = c(0.05,0.15)))+
  geom_vline(aes(xintercept = 0),linetype = "dotted")

p
#
```


## Statistical model
```{r}
#| eval: false
taxons <- c("Solea","Bombina","Lissotriton","Triturus","Anguis","Emys","Natrix","Sphyrapicus")

tree_org <- ape::read.tree("permutations/MHC_introgression_timetree.nwk")

# Time of divergence within species pair
dist <- read.csv("permutations/DistanceTips_FromTree.csv",fileEncoding = "UTF-8") #distance between tips

#prepare data
dt1 <- read.csv("temp_tables/Geographic_clines_Hedges_g.csv") %>%
  mutate("HYBRID_ZONE" = stringr::str_replace_all(HYBRID_ZONE,pattern = "[:upper:].*$",replacement = "")) %>%
  group_by(TAXON,HYBRID_ZONE,MARKER,PARAMETERS) %>%
  summarise("d" = mean(d),"v" = mean(v)) %>%
  mutate("SP1" = sapply(strsplit(HYBRID_ZONE,"_"),"[",1),"SP2" = sapply(strsplit(HYBRID_ZONE,"_"),"[",2)) %>%
  select(TAXON,HYBRID_ZONE,"CLASS" = MARKER,PARAMETERS,d,v,SP1,SP2) %>%
  mutate("TAXON" = factor(TAXON,levels = taxons)) %>%
  left_join(dist,c("SP1" = "SP1","SP2" = "SP2")) %>%
  mutate("DISTANCE" = if_else(is.na(DISTANCE) & SP1 == "occidentalis",0,DISTANCE)) %>%
  arrange(CLASS,HYBRID_ZONE) %>%
  mutate("CLASS" = stringr::str_replace_all(CLASS,"-"," "))

#diagnose node leading to a given species pair
shared_node <- mrca(tree_org) %>% #common node for species pairs
  as.data.frame() %>%
  mutate("SP1" = row.names(.)) %>% relocate(SP1,.before = 1) %>%
  pivot_longer(-SP1,names_to = "SP2",values_to = "NODE") %>%
  mutate("SP1" = sapply(sapply(SP1,strsplit,split = "_"),"[",2)) %>%
  mutate("SP2" = sapply(sapply(SP2,strsplit,split = "_"),"[",2)) %>%
  mutate("HYBRID_ZONE" = paste(SP1,SP2,sep = "_")) %>%
  select(-SP1,-SP2) %>%
  mutate("NODE" = as.character(NODE)) %>%
  add_row("NODE" = "25","HYBRID_ZONE" = "occidentalis_orbicularis") # adding Emys
  
#calculate distance between nodes
dist_nodes <- dist.nodes(tree_org) %>% as.data.frame() %>%
  mutate("NODE1" = row.names(.)) %>% relocate(NODE1,.before = 1) %>%
  pivot_longer(-NODE1,names_to = "NODE2",values_to = "DISTANCE") %>%
  left_join(shared_node,by = c("NODE1" = "NODE"),multiple = "all") %>%
  rename("HYBRID_ZONE1" = "HYBRID_ZONE") %>%
  left_join(shared_node,by = c("NODE2" = "NODE"),multiple = "all") %>%
  rename("HYBRID_ZONE2" = "HYBRID_ZONE")

# Correlation matrix
cor_mat <- data.frame("HYBRID_ZONE1" = sort(rep(unique(dt1$HYBRID_ZONE),times = length(unique(dt1$HYBRID_ZONE)))),
                      "HYBRID_ZONE2" = rep(unique(dt1$HYBRID_ZONE),times = length(unique(dt1$HYBRID_ZONE)))) %>%
  left_join(dist_nodes,by = c("HYBRID_ZONE1","HYBRID_ZONE2"),multiple = "all") %>%
  select(-NODE1,-NODE2) %>% 
  pivot_wider(names_from = "HYBRID_ZONE2",values_from = "DISTANCE",names_sort = F) %>%
  select(-HYBRID_ZONE1)

rownames(cor_mat) <- colnames(cor_mat)
cor_mat <- as.matrix(cor_mat)

max_value <- max(cor_mat) #changing matrix of distances into correlation matrix
cor_mat <- (max_value-cor_mat)/max_value

#keep the same correlation matrix within each MHC class but assume no correlation between MHC classes
null_mat <- cor_mat
null_mat[,] <- 0
cor_mat <- cbind(rbind(cor_mat,null_mat),rbind(null_mat,cor_mat))

#run models
parameters <- c("width","center")
formulas <- c("d~0+CLASS","d~CLASS","d~CLASS*DISTANCE","d~CLASS+DISTANCE")

out_list <- list()
out_models <- list()
for(i in parameters){
  dt <- filter(dt1,PARAMETERS == i)
  for(j in formulas){
    formula_v <- as.formula(j)
    
    #test different lambda values
    lambda_range <- seq(0,1,0.0001)
    ll <- c()
    for(lambda in lambda_range){
      if(lambda == 0){
        model_temp <- gls(formula_v,dt,method = "ML")
      } else {
        C_new <-  Matrix::nearPD(cor_mat*lambda)$mat
        C_new <- corSymm(C_new[lower.tri(C_new)], fixed = T)
        model_temp <- gls(formula_v,dt,correlation = C_new,weights = ~(1/v),method = "ML")
      }
      ll[length(ll)+1] <- model_temp$logLik
    }
    chosen_lambda <- lambda_range[which.max(ll)]
    
    #model with correlation
    if(chosen_lambda != 0){
      C_new <-  Matrix::nearPD(cor_mat*chosen_lambda)$mat # modify matrix and make it positive-definite
      C_new <- corSymm(C_new[lower.tri(C_new)], fixed = T)
      model1 <- gls(formula_v,dt,correlation = C_new,weights = ~(1/v),method = "ML")
      summary(model1)
    } else {
      model1 <- gls(formula_v,dt,weights = ~(1/v),method = "ML")
      summary(model1)
    }
    description <- list(i,j)
    model1$description <- description
    model1$lambda <- chosen_lambda
    out_models[[paste(i,j,sep = "&")]] <- model1
    
    if(j == "d~0+CLASS"){
    conf <-  as.data.frame(nlme::intervals(model1)$coef)
    out_list[[length(out_list)+1]] <- data.frame("CLASS" = c("MHC I","MHC II"),"MEAN" = model1$coefficients) %>%
      left_join(data.frame("CLASS" = c("MHC I","MHC II"),"YMIN" = conf$lower,"YMAX" = conf$upper),by = "CLASS") %>%
      mutate(PARAMETERS = i)
    }
  }
}
dt_means <- as.data.frame(do.call(rbind,out_list))


#plot only for the CLASS
p <- ggplot()+
  geom_point(aes(x = CLASS,y = d),data = dt1,position = position_jitter(width = 0.15),size = 3)+
  geom_point(aes(x = CLASS,y = MEAN),data = dt_means,col = "red",size = 3)+
  theme_bw()+
  geom_errorbar(aes(x = CLASS,ymin = YMIN,ymax = YMAX),data = dt_means,color = "red",width = 0.2,lwd = 2)+
  theme(axis.text = element_text(size = 20),panel.grid.major.x = element_blank(),axis.title.x = element_blank(),
        axis.title.y = element_text(size = 20),strip.text = element_text(size = 20))+
  labs(y = "Hedges g")+
  facet_wrap(vars(PARAMETERS)) +
  scale_y_continuous(limits = c(-0.9,1.4),breaks = c(-.8,-.6,-.4,-.2,0,.2,.4,.6,.8,1,1.2),expand = c(0,0))

p

#statistical models - p-values
t_tables <- as.data.frame(do.call(rbind,lapply(lapply(out_models, summary),function(x){as.data.frame(x$tTable) %>% 
    mutate("CLASS" = stringr::str_remove_all(rownames(.),"CLASSMHC ")) %>%
    mutate("PARAMETER" = x$description[[1]],"FORMULA" = x$description[[2]])})))
rownames(t_tables) <- NULL
```

# GENOMIC CLINES - MODEL

All files used at this stage were generated independently for each system. You can find the code in "./genomic_clines/independent_code/Genomic_clines_code_parallel.R" together with exemplary input file and output files.

```{r}
#| eval: false
taxons <- c("Solea","Bombina","Lissotriton","Triturus","Anguis","Natrix","Sphyrapicus")

tree_org <- ape::read.tree("permutations/MHC_introgression_timetree.nwk")

dist <- read.csv("permutations/DistanceTips_FromTree.csv",fileEncoding = "UTF-8") #distance between tips

#prepare data
read_and_rbind_perm <- function(taxons){
  taxs <- paste0("./genomic_clines/",taxons,"_GenomicClines_parameters.csv")
  dts <- lapply(taxs,read.csv,fileEncoding = "UTF-8") #%>% lapply(.,select,INDIVIDUAL_ID,CLASS,ALLELE,GENOTYPE)
  dts <- lapply(1:length(dts), function(x){mutate(dts[[x]],"TAXON" = taxons[x])})
  as.data.frame(do.call(rbind,dts))
}

#correct signs of centre
allelic_richness <- read.csv("temp_tables/AllelicRichness_perSpecies.csv") %>%
  mutate("CLASS" = case_when(grepl("II",CLASS) ~ "MHC II",grepl("I$",CLASS)  ~ "MHC I",T ~ CLASS)) %>%
  select(-TAXON)

dt1 <- read_and_rbind_perm(taxons) %>%
  mutate("SE" = (UPPER_2LL-LOWER_2LL)/3.92) %>%
  mutate("VAR" = SE^2) %>%
  mutate("HYBRID_ZONE" = stringr::str_replace_all(HYBRID_ZONE,pattern = "[:upper:].*$",replacement = "")) %>%
  group_by(TAXON,HYBRID_ZONE,CLASS,PARAMETERS) %>%
  summarise("d" = mean(VALUE),"v" = mean(VAR)) %>%
  mutate("SP1" = sapply(strsplit(HYBRID_ZONE,"_"),"[",1),"SP2" = sapply(strsplit(HYBRID_ZONE,"_"),"[",2)) %>%
  select(TAXON,HYBRID_ZONE,CLASS,PARAMETERS,d,v,SP1,SP2) %>%
  mutate("TAXON" = factor(TAXON,levels = taxons)) %>%
  left_join(dist,c("SP1" = "SP1","SP2" = "SP2")) %>%
  arrange(CLASS,HYBRID_ZONE) %>%
  mutate("CLASS" = paste("MHC",CLASS)) %>%
  left_join(allelic_richness, by = c("CLASS" = "CLASS","SP1" = "SPECIES")) %>%
  rename("AR1" = "ALL_RICHNESS") %>%
  left_join(allelic_richness, by = c("CLASS" = "CLASS","SP2" = "SPECIES")) %>%
  rename("AR2" = "ALL_RICHNESS") %>%
  mutate("d" = case_when(PARAMETERS == "ALPHA" & AR1 > AR2 ~ -d,T ~ d))

#write.csv(dt1,"temp_tables/GenomicClines_tableModels.csv",fileEncoding = "UTF-8",row.names = F)

dt1 <- filter(dt1,PARAMETERS %in% c("BETA","ALPHA"))

shared_node <- mrca(tree_org) %>% #common node for species pairs
  as.data.frame() %>%
  mutate("SP1" = row.names(.)) %>% relocate(SP1,.before = 1) %>%
  pivot_longer(-SP1,names_to = "SP2",values_to = "NODE") %>%
  mutate("SP1" = sapply(sapply(SP1,strsplit,split = "_"),"[",2)) %>%
  mutate("SP2" = sapply(sapply(SP2,strsplit,split = "_"),"[",2)) %>%
  mutate("HYBRID_ZONE" = paste(SP1,SP2,sep = "_")) %>%
  select(-SP1,-SP2) %>%
  mutate("NODE" = as.character(NODE)) %>%
  add_row("NODE" = "25","HYBRID_ZONE" = "occidentalis_orbicularis") #%>% #adding Emys

#calculate distance between nodes
dist_nodes <- dist.nodes(tree_org) %>% as.data.frame() %>%
  mutate("NODE1" = row.names(.)) %>% relocate(NODE1,.before = 1) %>%
  pivot_longer(-NODE1,names_to = "NODE2",values_to = "DISTANCE") %>%
  left_join(shared_node,by = c("NODE1" = "NODE"),multiple = "all") %>%
  rename("HYBRID_ZONE1" = "HYBRID_ZONE") %>%
  left_join(shared_node,by = c("NODE2" = "NODE"),multiple = "all") %>%
  rename("HYBRID_ZONE2" = "HYBRID_ZONE")

# Correlation matrix
cor_mat <- data.frame("HYBRID_ZONE1" = sort(rep(unique(dt1$HYBRID_ZONE),times = length(unique(dt1$HYBRID_ZONE)))),
                      "HYBRID_ZONE2" = rep(unique(dt1$HYBRID_ZONE),times = length(unique(dt1$HYBRID_ZONE)))) %>%
  left_join(dist_nodes,by = c("HYBRID_ZONE1","HYBRID_ZONE2"),multiple = "all") %>%
  select(-NODE1,-NODE2) %>% 
  pivot_wider(names_from = "HYBRID_ZONE2",values_from = "DISTANCE",names_sort = F) %>%
  select(-HYBRID_ZONE1)

rownames(cor_mat) <- colnames(cor_mat)
cor_mat <- as.matrix(cor_mat)

max_value <- max(cor_mat) #changing matrix of distances into correlation matrix
cor_mat <- (max_value-cor_mat)/max_value

#keep the same correlation matrix within each MHC class but assume no correlation between MHC classes
null_mat <- cor_mat
null_mat[,] <- 0
cor_mat <- cbind(rbind(cor_mat,null_mat),rbind(null_mat,cor_mat))

parameters <- c("BETA","ALPHA") #either alpha or beta parameter
formulas <- c("d~0+CLASS","d~CLASS","d~CLASS*DISTANCE","d~CLASS+DISTANCE")

out_list <- list()
out_models <- list()
for(i in parameters){
  dt <- read.csv("temp_tables/GenomicClines_tableModels.csv") %>% filter(PARAMETERS == i)
  for(j in formulas){
    formula_v <- as.formula(j)
    #test different lambda values
    lambda_range <- seq(0,1,0.0001)
    ll <- c()
    for(lambda in lambda_range){
      if(lambda == 0){
        model_temp <- gls(formula_v,dt,method = "ML")
      } else {
        C_new <-  Matrix::nearPD(cor_mat*lambda)$mat
        C_new <- corSymm(C_new[lower.tri(C_new)], fixed = T)
        model_temp <- gls(formula_v,dt,correlation = C_new,weights = ~(1/v),method = "ML")
      }
      ll[length(ll)+1] <- model_temp$logLik
    }
    chosen_lambda <- lambda_range[which.max(ll)]
    
    #model with correlation
    if(chosen_lambda != 0){
      C_new <-  Matrix::nearPD(cor_mat*chosen_lambda)$mat # modify matrix and make it positive-definite
      C_new <- corSymm(C_new[lower.tri(C_new)], fixed = T)
      model1 <- gls(formula_v,dt,correlation = C_new,weights = ~(1/v),method = "ML")
      summary(model1)
    } else {
      model1 <- gls(formula_v,dt,weights = ~(1/v),method = "ML")
      summary(model1)
    }
    
    description <- list(i,j)
    model1$description <- description
    model1$lambda <- chosen_lambda
    out_models[[paste(i,j,sep = "&")]] <- model1
    
    #plotting just CLASS (when formula is d ~ 0+CLASS)
    if(j == "d~0+CLASS"){
      conf <-  as.data.frame(nlme::intervals(model1)$coef)
      out_list[[length(out_list)+1]] <- data.frame("CLASS" = c("MHC I","MHC II"),"MEAN" = model1$coefficients) %>%
        left_join(data.frame("CLASS" = c("MHC I","MHC II"),"YMIN" = conf$lower,"YMAX" = conf$upper),by = "CLASS") %>%
        mutate("PARAMETERS" = i)
    }
  }
}
dt_means <- as.data.frame(do.call(rbind,out_list))

#statistical models - p-values
t_tables <- as.data.frame(do.call(rbind,lapply(lapply(out_models, summary),function(x){as.data.frame(x$tTable) %>% 
    mutate("CLASS" = stringr::str_remove_all(rownames(.),"CLASSMHC ")) %>%
    mutate("PARAMETER" = x$description[[1]],"FORMULA" = x$description[[2]])})))
rownames(t_tables) <- NULL
#write.csv(t_tables,"temp_tables/Genomic_clines_pValues.csv",row.names = F,fileEncoding = "UTF-8")

#plot for CLASS only
p <- ggplot()+
  geom_point(aes(x = CLASS,y = d),data = dt1,position = position_jitter(width = 0.15),size = 3)+
  geom_point(aes(x = CLASS,y = MEAN),data = dt_means,col = "red",size = 3)+
  theme_bw()+
  geom_errorbar(aes(x = CLASS,ymin = YMIN,ymax = YMAX),data = dt_means,color = "red",width = 0.2,lwd = 2)+
  theme(axis.text = element_text(size = 20),panel.grid.major.x = element_blank(),axis.title.x = element_blank(),
        axis.title.y = element_text(size = 20),strip.text = element_text(size = 20))+
  facet_wrap(vars(PARAMETERS))+
  labs(y = "VALUE")+ylim(-1.05,1.05)
p
```


# R session info

```{r}
sessionInfo()
```
